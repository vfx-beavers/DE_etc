docker exec -it kafka-0 /opt/bitnami/kafka/bin/kafka-topics.sh --create --topic mytopic --bootstrap-server kafka-0:9092 --partitions 1 --replication-factor 1

docker exec -it kafka-0 /opt/bitnami/kafka/bin/kafka-topics.sh --create --topic mytopic-json --bootstrap-server kafka-0:9092 --partitions 1 --replication-factor 1

docker exec -it kafka-0 /opt/bitnami/kafka/bin/kafka-topics.sh --create --topic registration --bootstrap-server kafka-0:9092 --partitions 1 --replication-factor 1

docker exec -it kafka-0 /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --topic mytopic --describe

curl -s localhost:8083 | jq

Чтобы сконфигурировать Kafka Connect, необходимо отправить PUT-запрос с параметрами конфигурации.

curl -X PUT \
-H "Content-Type: application/json" \
--data '{
"name": "file-stream-sink",
"connector.class": "org.apache.kafka.connect.file.FileStreamSinkConnector",
"tasks.max": "1",
"topics": "mytopic",
"file": "mytopic.out",
"value.converter": "org.apache.kafka.connect.storage.StringConverter"
}' \
http://localhost:8083/connectors/file-stream-sink/config

docker ps | grep kafka-connect

docker exec kafka_connect_full_01-kafka-connect-xyz-1 cat mytopic.out
docker exec kafka_connect_full_01-kafka-connect-xyz-1 cat mytopic-json.out

curl http://localhost:8083/connectors/file-stream-sink-json/status
curl -X GET http://localhost:8083/connectors/file-stream-sink-json/tasks/0/status

